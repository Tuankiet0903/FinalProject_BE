// service/ManageMemberSpaceService.js
import Space from "../model/Space.js";
import ManageMemberSpace from "../model/ManageMemberSpace.js";
import User from "../model/User.js";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";
import Folder from "../model/Folder.js";
import List from "../model/List.js";

class ManageMemberSpaceService {
  /**
   * L·∫•y danh s√°ch c√°c space m√† ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p trong m·ªôt workspace c·ª• th·ªÉ
   * @param {number} userId - ID c·ªßa user.
   * @param {number} workspaceId - ID c·ªßa workspace.
   * @returns {Promise<Array>} - Danh s√°ch c√°c spaceId m√† ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p.
   */
  static async getUserSpacesInWorkspace(userId, workspaceId) {
    try {
      // Truy v·∫•n c√°c kh√¥ng gian c·ªßa ng∆∞·ªùi d√πng trong workspace
      const spaces = await ManageMemberSpace.findAll({
        where: { userId, workspaceId }, // L·ªçc theo userId v√† workspaceId
        attributes: ["spaceId"], // L·∫•y spaceId
        include: [
          {
            model: Space, // Li√™n k·∫øt v·ªõi b·∫£ng Space
            // Kh√¥ng ch·ªâ ƒë·ªãnh 'attributes' ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa Space
            include: [
              {
                model: Folder, // Li√™n k·∫øt v·ªõi b·∫£ng Folder
                as: 'folders',
                // Kh√¥ng ch·ªâ ƒë·ªãnh 'attributes' ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa Folder
                include: [
                  {
                    model: List, // Li√™n k·∫øt v·ªõi b·∫£ng List
                    as: 'lists',
                    // Kh√¥ng ch·ªâ ƒë·ªãnh 'attributes' ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa List
                  }
                ]
              }
            ]
          }
        ]
      });
  
      // Tr·∫£ v·ªÅ danh s√°ch c√°c kh√¥ng gian v·ªõi t√™n c·ªßa t·ª´ng space, th∆∞ m·ª•c v√† danh s√°ch
      return spaces.map((space) => ({
        spaceId: space.spaceId,
        spaceName: space.Space.name, // L·∫•y t√™n c·ªßa space t·ª´ b·∫£ng Space
        // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa th∆∞ m·ª•c v√† danh s√°ch
        folders: space.Space.folders.map(folder => ({
          folderId: folder.folderId,
          folderName: folder.name,
          // L·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa List
          lists: folder.lists.map(list => ({
            listId: list.listId,
            listName: list.name,
            // B·∫°n c√≥ th·ªÉ th√™m b·∫•t k·ª≥ tr∆∞·ªùng n√†o kh√°c t·ª´ List m√† b·∫°n mu·ªën
          }))
        }))
      }));
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch spaces c·ªßa user trong workspace:", error);
      throw error;
    }
  }
  
  


  static async getMembersBySpace(spaceId) {
    try {
      console.log("üîç Fetching members for spaceId:", spaceId);

      if (!spaceId) {
        throw new Error("spaceId is required");
      }

      // ‚úÖ JOIN `ManageMemberSpace` v·ªõi `User`
      const members = await ManageMemberSpace.findAll({
        where: { spaceId },
        include: [
          {
            model: User,  
            as: "User",
            attributes: ["userId", "fullName", "email", "avatar"], // ‚ùå Kh√¥ng l·∫•y active t·ª´ User
          },
        ],
      });

      if (!members.length) {
        console.warn("‚ö†Ô∏è No members found for spaceId:", spaceId);
        return [];
      }

      // ‚úÖ Chu·∫©n h√≥a d·ªØ li·ªáu tr·∫£ v·ªÅ
      return members.map((member) => ({
        id: member.User?.userId || null,
        name: member.User?.fullName || "Unknown",
        email: member.User?.email || "No email",
        avatar: member.User?.avatar || "/default-avatar.png",
        role: member.roleSpace || "Member",
        status: member.status ? "Active" : "Pending", // ‚úÖ L·∫•y status t·ª´ `ManageMemberSpace`
      }));
    } catch (error) {
      console.error("‚ùå Database Query Error:", error);
      throw new Error("Failed to fetch members from database");
    }
  }

  static async getUserRoleInSpace(userId, spaceId) {
    try {
      // T√¨m member trong ManageMemberSpace d·ª±a v√†o userId v√† spaceId
      const member = await ManageMemberSpace.findOne({
        where: { userId, spaceId },
        attributes: ["roleSpace"], // L·∫•y roleSpace
      });

      // Tr·∫£ v·ªÅ role n·∫øu t√¨m th·∫•y, n·∫øu kh√¥ng tr·∫£ v·ªÅ null
      return member ? member.roleSpace : null;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y role c·ªßa user trong space:", error);
      throw error;
    }
  }
  static async inviteMemberToSpace(workspaceId, spaceId, memberId, roleSpace, email) {
    try {
      // T·∫°o b·∫£n ghi m·ªùi th√†nh vi√™n v√†o kh√¥ng gian, s·ª≠ d·ª•ng memberId = userId
      const newInvite = await ManageMemberSpace.create({
        workspaceId,
        spaceId,
        userId: memberId, // S·ª≠ d·ª•ng memberId l√†m userId (v√¨ memberId v√† userId l√† m·ªôt)
        roleSpace,
        status: false, // ƒê·∫∑t tr·∫°ng th√°i m·ªùi l√† false (ch∆∞a ch·∫•p nh·∫≠n)
      });

      // G·ª≠i email m·ªùi
      await this.sendInviteEmail(email, memberId, workspaceId, spaceId);

      return newInvite;
    } catch (error) {
      console.error("‚ùå Error when inviting user:", error.message);
      throw new Error("Error when inviting user");
    }
  }
  static async deleteUserFromSpace(workspaceId, spaceId, userId) {
    try {
      // T√¨m v√† x√≥a th√†nh vi√™n kh·ªèi b·∫£ng ManageMemberSpace v·ªõi workspaceId v√† spaceId
      const deleted = await ManageMemberSpace.destroy({
        where: { 
          userId, 
          workspaceId, 
          spaceId 
        },
      });

      if (deleted > 0) {
        return { message: "User ƒë√£ b·ªã x√≥a kh·ªèi kh√¥ng gian" };
      } else {
        return { message: "Kh√¥ng t√¨m th·∫•y user trong kh√¥ng gian n√†y" };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a ho√†n to√†n user kh·ªèi kh√¥ng gian:", error);
      throw error;
    }
  }

  static async sendInviteEmail(email, userId, workspaceId, spaceId) {
    try {
      // T·∫°o token ƒë·ªÉ x√°c nh·∫≠n l·ªùi m·ªùi
      const token = jwt.sign({ userId, workspaceId, spaceId }, process.env.JWT_SECRET, { expiresIn: "24h" });
      
      // T·∫°o link x√°c nh·∫≠n v√† t·ª´ ch·ªëi v·ªõi token
      const inviteLink = `http://localhost:5173/confirm-invite?inviteToken=${token}&userId=${userId}&spaceId=${spaceId}&workspaceId=${workspaceId}`;
      const declineLink = `http://localhost:5173/decline-invite?inviteToken=${token}`;

      // C·∫•u h√¨nh Nodemailer
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL, // Email c·ªßa b·∫°n
          pass: process.env.EMAIL_PASSWORD, // M·∫≠t kh·∫©u ·ª©ng d·ª•ng email c·ªßa b·∫°n
        },
      });

      // C·∫•u h√¨nh email
      const mailOptions = {
        from: process.env.EMAIL, // ƒê·ªãa ch·ªâ email g·ª≠i
        to: email, // ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n
        subject: "You're Invited to Join a Workspace!", // Ti√™u ƒë·ªÅ email
        html: `
          <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f7fb; color: #333;">
            <h2 style="color: #4CAF50;">You're Invited to Join a Workspace!</h2>
            <p style="font-size: 16px; color: #555;">
              Hello, 
              <br><br>
              You've been invited to join a workspace. Click the button below to accept the invitation and get started.
            </p>
            <div style="text-align: center; margin: 20px 0;">
              <a href="${inviteLink}" style="padding: 15px 25px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 8px; font-size: 16px; font-weight: bold; display: inline-block;">Accept Invitation</a>
            </div>
            <p style="font-size: 14px; color: #888;">This link will expire in 24 hours.</p>
            <div style="text-align: center; margin-top: 15px;">
              <a href="${declineLink}" style="padding: 10px 20px; background-color: #f44336; color: white; text-decoration: none; border-radius: 8px; font-size: 16px; font-weight: bold; display: inline-block;">Decline Invitation</a>
            </div>
            <p style="font-size: 12px; color: #888; text-align: center; margin-top: 20px;">
              If you did not expect this email, please ignore it.
            </p>
          </div>
        `,
      };

      // G·ª≠i email
      await transporter.sendMail(mailOptions);
      console.log("‚úÖ Invitation email sent to:", email);
    } catch (error) {
      console.error("‚ùå Failed to send invitation email:", error.message);
      throw new Error("Error sending invitation email");
    }
  }
  

  

}












export default ManageMemberSpaceService;
