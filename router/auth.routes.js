import express from "express";
import passport from "../config/passport.js";
import jwt from "jsonwebtoken";
import AuthService from "../services/AuthService.js";
import { createWelcomeNotification } from "../controller/NotificationController.js";
import User from "../model/User.js"; // Import model User
import ManageMemberWorkSpace from "../model/ManageMenberWorkSpace.js";
import ManageMemberSpace from '../model/ManageMemberSpace.js';

const router = express.Router();

// ƒêƒÉng k√Ω t√†i kho·∫£n
router.post("/register", async (req, res) => {
   try {
      const { token, user } = await AuthService.register(req.body);
      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", token, user });
   } catch (error) {
      console.error("Error during registration:", error);
      res.status(400).json({ error: error.message });
   }
});

// ƒêƒÉng nh·∫≠p th√¥ng th∆∞·ªùng
router.post("/login", async (req, res) => {
   try {
      const { email, password } = req.body;
      const { token, user } = await AuthService.login(email, password);

      // L∆∞u token v√†o cookie
      res.cookie("token", token, {
         httpOnly: true,
         secure: false,  // Ph·∫£i l√† `false` khi test tr√™n localhost
         sameSite: "lax",
         maxAge: 24 * 60 * 60 * 1000 // 24h
      });

      // T·∫°o th√¥ng b√°o ch√†o m·ª´ng
      const notification = await createWelcomeNotification(user.userId);
      console.log('Welcome notification created:', notification);

      res.status(200).json({
         message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
         token,
         user,
         notification
      });
   } catch (error) {
      console.error("Login error:", error);
      res.status(401).json({ error: error.message });
   }
});

// Google OAuth - B·∫Øt ƒë·∫ßu x√°c th·ª±c
router.get("/google", passport.authenticate("google", { scope: ["profile", "email"] }));

// Google OAuth - X·ª≠ l√Ω callback
router.get(
   "/google/callback",
   passport.authenticate("google", { failureRedirect: "http://localhost:5173/login" }),
   async (req, res) => {
      try {
         const googleUser = req.user;

         if (!googleUser) {
            console.error("‚ùå Google authentication failed.");
            return res.redirect("http://localhost:5173/login?error=auth_failed");
         }

         console.log("‚úÖ Google User Info:", googleUser);

         // üî• T√¨m xem email n√†y c√≥ trong b·∫£ng User kh√¥ng?
         let user = await User.findOne({ where: { email: googleUser.email } });

         if (!user) {
            console.log("üÜï User not found in DB. Creating new user...");
            user = await User.create({
               email: googleUser.email,
               fullName: googleUser.fullName,
               avatar: googleUser.avatar,
               active: false, // ‚úÖ S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi k√≠ch ho·∫°t t·ª´ l·ªùi m·ªùi
            });
         }

         // üî• Ki·ªÉm tra xem user c√≥ l·ªùi m·ªùi kh√¥ng
         const invitedMember = await ManageMemberWorkSpace.findOne({
            where: { userId: user.userId }
         });

         if (invitedMember) {
            console.log("üéâ User was invited! Updating status to active...");
            await ManageMemberWorkSpace.update(
               { status: true },
               { where: { userId: user.userId } }
            );
         }

         // ‚úÖ T·∫°o JWT token
         const token = jwt.sign(
            { userId: user.userId, email: user.email, fullName: user.fullName, avatar: user.avatar },
            process.env.JWT_SECRET,
            { expiresIn: "24h" }
         );

         // ‚úÖ L∆∞u token v√†o cookie
         res.cookie("token", token, {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: "lax",
            maxAge: 24 * 60 * 60 * 1000,
         });

         console.log(`‚úÖ User ${user.email} logged in successfully!`);

         // ‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch√≠nh
         res.redirect(`http://localhost:5173/user`);
      } catch (error) {
         console.error("Google callback error:", error);
         res.redirect("http://localhost:5173/login?error=server_error");
      }
   }
);


router.get("/google/success", (req, res) => {
   if (!req.user) {
      return res.status(401).json({ error: "Not authenticated" });
   }

   // ‚úÖ Tr·∫£ token v·ªÅ frontend t·ª´ cookies
   res.json({
      message: "Google login successful",
      token: req.cookies.token,  // üî• L·∫•y token t·ª´ cookies
      user: {
         userId: req.user.userId,
         fullName: req.user.fullName,
         email: req.user.email,
         avatar: req.user.avatar,
      },
   });
});
router.get("/activate/:token", async (req, res) => {
   try {
      const { token } = req.params;
      console.log("üì© Received activation token:", token); // ‚úÖ Debug token

      // üî• Gi·∫£i m√£ token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log("‚úÖ Decoded token:", decoded);

      const { email, workspaceId } = decoded;

      // üîç T√¨m user theo email
      const user = await User.findOne({ where: { email } });

      if (!user || user.active) {
         console.error("‚ùå Invalid or expired token.");
         return res.status(400).json({ error: "Invalid or expired token." });
      }

      // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i user th√†nh active
      user.active = true;
      user.inviteToken = null;
      user.inviteTokenExpires = null;
      await user.save();

      // ‚úÖ Ki·ªÉm tra xem `ManageMemberWorkSpace` c√≥ t·ªìn t·∫°i kh√¥ng
      const member = await ManageMemberWorkSpace.findOne({
         where: { workspaceId, userId: user.userId }
      });

      if (!member) {
         console.error("‚ùå User not found in workspace.");
         return res.status(404).json({ error: "User is not a member of this workspace." });
      }

      // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i trong `ManageMemberWorkSpace`
      await ManageMemberWorkSpace.update(
         { active: "Active" },
         { where: { workspaceId, userId: user.userId } }
      );

      // ‚úÖ T·∫°o token ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông sau khi k√≠ch ho·∫°t
      const authToken = jwt.sign(
         { userId: user.userId, email: user.email, fullName: user.fullName, avatar: user.avatar },
         process.env.JWT_SECRET,
         { expiresIn: "24h" }
      );

      // ‚úÖ L∆∞u token v√†o cookie
      res.cookie("token", authToken, {
         httpOnly: true,
         secure: process.env.NODE_ENV === "production",
         sameSite: "lax",
         maxAge: 24 * 60 * 60 * 1000, // 24h
      });

      console.log(`‚úÖ User ${email} activated successfully and redirected to workspace ${workspaceId}`);

      // ‚úÖ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn `manage-people/:workspaceId` tr√™n FE
      res.json({ success: true, workspaceId });

   } catch (error) {
      console.error("‚ùå Activation error:", error.message);
      res.status(500).json({ error: "Internal Server Error" });
   }
});

router.post("/activate-from-google", async (req, res) => {
   try {
     const { inviteToken } = req.body;

     if (!inviteToken) return res.status(400).json({ error: "Missing invite token" });

     // üî• Gi·∫£i m√£ token t·ª´ email m·ªùi
     const decoded = jwt.verify(inviteToken, process.env.JWT_SECRET);
     const { email, workspaceId } = decoded;

     // üîç T√¨m user theo email
     const user = await User.findOne({ where: { email } });

     if (!user) return res.status(404).json({ error: "User not found" });

     // ‚úÖ L·∫•y th√¥ng tin t·ª´ Google Token (L·∫•y t·ª´ session ho·∫∑c database)
     const googleUser = req.user; 

     if (!googleUser) return res.status(401).json({ error: "Google login required" });

     console.log("üåü Google User Data:", googleUser);

     // üî• C·∫≠p nh·∫≠t th√¥ng tin user t·ª´ Google
     user.fullName = googleUser.fullName;
     user.avatar = googleUser.avatar;
     user.active = true; 
     await user.save();

     console.log(`‚úÖ Updated User: ${user.email} | Name: ${user.fullName} | Avatar: ${user.avatar}`);

     // üî• C·∫≠p nh·∫≠t tr·∫°ng th√°i trong `ManageMemberWorkSpace`
     await ManageMemberWorkSpace.update(
       { status: true }, // Chuy·ªÉn tr·∫°ng th√°i th√†nh Active
       { where: { workspaceId, userId: user.userId } }
     );

     console.log(`‚úÖ Workspace ${workspaceId} - User ${user.email} Activated!`);

     res.json({ success: true, message: "User activated successfully!" });

   } catch (error) {
     console.error("‚ùå Activation error:", error);
     res.status(500).json({ error: "Internal Server Error" });
   }
 });


 router.get('/confirm-invite', async (req, res) => {
  const { inviteToken, userId, spaceId, workspaceId } = req.query;

  try {
    // Gi·∫£i m√£ token
    const decoded = jwt.verify(inviteToken, process.env.JWT_SECRET);  
   console.log("Decoded Token:", decoded);
    // Log ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã c·ªßa decoded
    console.log("Decoded Token:", decoded);

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token v√† so s√°nh v·ªõi c√°c tham s·ªë t·ª´ URL
    if (Number(decoded.userId) !== Number(userId) || Number(decoded.workspaceId) !== Number(workspaceId) || Number(decoded.spaceId) !== Number(spaceId)) {
     console.log(Number(decoded.userId));
       console.log(Number(userId));
         console.log(Number(decoded.workspaceId));

      console.log(Number(workspaceId));
      console.log(Number(decoded.spaceId));

      console.log(Number(spaceId));

      console.error("Token doesn't match the parameters.");
      return res.status(400).send("Invalid invitation token.");
    }

    // T√¨m b·∫£n ghi c·ªßa l·ªùi m·ªùi trong ManageMemberSpace
    const invite = await ManageMemberSpace.findOne({
      where: { userId, spaceId, workspaceId },
    });

    if (!invite) {
      return res.status(404).send("Invite not found.");
    }

    invite.status = true;
    await invite.save();

    res.status(200).send("Invitation confirmed successfully!");

  } catch (error) {
    console.error("Error confirming invitation:", error);
    if (error.name === 'TokenExpiredError') {
      return res.status(401).send("The invitation link has expired.");
    }
    res.status(500).send("Server error.");
  }
});

 
 
 

 
// ƒêƒÉng xu·∫•t
router.get("/logout", (req, res) => {
   res.clearCookie("token", { httpOnly: true, secure: false, sameSite: "Lax" }); // X√≥a token trong cookies
   res.json({ message: "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!" }); // G·ª≠i response v·ªÅ FE ƒë·ªÉ x·ª≠ l√Ω ti·∫øp
   res.redirect("http://localhost:5173/login");
});

export default router;
