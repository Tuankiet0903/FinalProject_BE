import ManageMemberWorkspaceService from "../services/ManageMemberWorkspaceService.js";

// üîπ X·ª≠ l√Ω API x√≥a user kh·ªèi workspace
export const removeUserFromWorkspace = async (req, res) => {
  try {
    const { workspaceId, userId } = req.body;

    if (!workspaceId || !userId) {
      return res.status(400).json({ error: "workspaceId v√† userId l√† b·∫Øt bu·ªôc" });
    }

    const result = await ManageMemberWorkspaceService.removeUserFromWorkspace(workspaceId, userId);
    if (result) {
      return res.status(200).json({ message: "User ƒë√£ b·ªã x√≥a kh·ªèi workspace" });
    } else {
      return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i trong workspace" });
    }
  } catch (error) {
    console.error("‚ùå Error removing user:", error);
    return res.status(500).json({ error: "L·ªói server khi x√≥a user" });
  }
};

// üîπ X·ª≠ l√Ω API x√≥a ho√†n to√†n user kh·ªèi workspace
export const deleteUserFromWorkspace = async (req, res) => {
  try {
    const { workspaceId, userId } = req.params;

    if (!workspaceId || !userId) {
      return res.status(400).json({ error: "workspaceId v√† userId l√† b·∫Øt bu·ªôc" });
    }

    const result = await ManageMemberWorkspaceService.deleteUserFromWorkspace(workspaceId, userId);
    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Error deleting user:", error);
    return res.status(500).json({ error: "L·ªói server khi x√≥a user" });
  }
};
export const resendInviteToWorkspace = async (req, res) => {
    try {
      const { workspaceId, email } = req.body;
      if (!workspaceId || !email) {
        return res.status(400).json({ error: "workspaceId v√† email l√† b·∫Øt bu·ªôc" });
      }
  
      // G·ª≠i l·∫°i email m·ªùi
      await EmailService.sendInviteEmail(email, workspaceId); // G·ªçi h√†m g·ª≠i email l·∫°i
  
      return res.status(200).json({ message: `L·ªùi m·ªùi ƒë√£ g·ª≠i l·∫°i ƒë·∫øn ${email}` });
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i l·∫°i l·ªùi m·ªùi:", error);
      return res.status(500).json({ error: "Kh√¥ng th·ªÉ g·ª≠i l·∫°i l·ªùi m·ªùi" });
    }
  };
