import ManageMemberSpaceService from "../services/manageMemberSpaceService.js";


export const getUserSpacesInvited = async (req, res) => {
  try {
    const { workspaceId } = req.params;
    const userId = req.user.userId; // L·∫•y user t·ª´ token

    if (!workspaceId || !userId) {
      return res.status(400).json({ error: "workspaceId ho·∫∑c userId b·ªã thi·∫øu" });
    }

    const spaces = await ManageMemberSpaceService.getUserSpaces(userId, workspaceId);

    return res.status(200).json(spaces);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch space c·ªßa user:", error);
    return res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch space" });
  }
};


export const fetchUserSpacesInWorkspaceController = async (req, res) => {
  try {
    const { userId, workspaceId } = req.params; // L·∫•y userId v√† workspaceId t·ª´ URL params

    if (!userId || !workspaceId) {
      return res.status(400).json({ message: "userId and workspaceId are required." });
    }

    // G·ªçi Service ƒë·ªÉ l·∫•y danh s√°ch spaceId v√† spaceName cho user trong workspace
    const userSpaces = await ManageMemberSpaceService.getUserSpacesInWorkspace(userId, workspaceId);

    // N·∫øu kh√¥ng t√¨m th·∫•y space cho user trong workspace
    if (userSpaces.length === 0) {
      return res.status(404).json({ message: "No spaces found for the user in this workspace." });
    }

    // Tr·∫£ v·ªÅ c√°c space m√† user c√≥ quy·ªÅn truy c·∫≠p c√πng t√™n c·ªßa t·ª´ng space
    res.status(200).json(userSpaces);
  } catch (error) {
    console.error("‚ùå Error fetching user spaces in workspace:", error.message);
    res.status(500).json({ message: "Internal server error.", error: error.message });
  }
};

export const getMembersBySpace = async (req, res) => {
  try {
      const { spaceId } = req.params;

      if (!spaceId) {
          return res.status(400).json({ error: "spaceId is required" });
      }

      console.log("üîç Fetching members for spaceId:", spaceId);

      // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch th√†nh vi√™n t·ª´ ManageMemberSpace
      const members = await ManageMemberSpaceService.getMembersBySpace(spaceId);

      if (!members || members.length === 0) {
          return res.status(200).json([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ l·ªói 404
      }

      // Add status to each member if needed
      const responseMembers = members.map(member => ({
          ...member,
          status: member.status, // Include status in the response
      }));

      return res.status(200).json(responseMembers);
  } catch (error) {
      console.error("‚ùå Error fetching members:", error);
      return res.status(500).json({ error: "Internal Server Error", details: error.message });
  }
};

export const getUserRoleInSpace = async (req, res) => {
  try {
    const { userId, spaceId } = req.params;

    if (!userId || !spaceId) {
      return res.status(400).json({ error: "Missing userId or spaceId" });
    }

    // G·ªçi service ƒë·ªÉ l·∫•y role c·ªßa user trong space
    const role = await ManageMemberSpaceService.getUserRoleInSpace(userId, spaceId);

    if (!role) {
      return res.status(404).json({ error: "User not found in space" });
    }

    return res.status(200).json({ role });
  } catch (error) {
    console.error("‚ùå Error getting user role:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

export const inviteMemberToSpace = async (req, res) => {
  try {
    // L·∫•y workspaceId v√† spaceId t·ª´ URL params
    const { workspaceId, spaceId } = req.params; 
    // L·∫•y th√¥ng tin t·ª´ body (memberId v√† roleSpace)
    const { memberId, roleSpace,email } = req.body;

    // Ki·ªÉm tra xem c√°c tham s·ªë c√≥ t·ªìn t·∫°i kh√¥ng
    console.log("workspaceId:", workspaceId);
    console.log("spaceId:", spaceId);
    console.log("memberId:", memberId);
    console.log("roleSpace:", roleSpace);

    if (!workspaceId || !spaceId || !memberId || !roleSpace || !email) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin workspaceId, spaceId, memberId ho·∫∑c roleSpace." });
    }

    // G·ªçi service ƒë·ªÉ m·ªùi th√†nh vi√™n v√†o kh√¥ng gian
    const inviteResult = await ManageMemberSpaceService.inviteMemberToSpace(workspaceId, spaceId, memberId, roleSpace, email);

    return res.status(200).json({
      message: "M·ªùi th√†nh vi√™n th√†nh c√¥ng",
      invite: inviteResult
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi m·ªùi th√†nh vi√™n v√†o kh√¥ng gian:", error);
    return res.status(500).json({ error: "L·ªói h·ªá th·ªëng khi m·ªùi th√†nh vi√™n v√†o kh√¥ng gian." });
  }
};

export const deleteUserFromSpace = async (req, res) => {
  try {
    const { workspaceId, spaceId, userId } = req.params;

    // Ki·ªÉm tra xem workspaceId, spaceId, v√† userId c√≥ h·ª£p l·ªá kh√¥ng
    if (!workspaceId || !spaceId || !userId) {
      return res.status(400).json({ error: "workspaceId, spaceId v√† userId l√† b·∫Øt bu·ªôc" });
    }

    // G·ªçi service ƒë·ªÉ x√≥a th√†nh vi√™n kh·ªèi space
    const result = await ManageMemberSpaceService.deleteUserFromSpace(workspaceId, spaceId, userId);
    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Error deleting user from space:", error);
    return res.status(500).json({ error: "L·ªói server khi x√≥a user kh·ªèi space" });
  }
};



