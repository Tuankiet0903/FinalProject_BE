import jwt from "jsonwebtoken";
import ENV from "../config/config.js";

export default function Auth(req, res, next) {
   try {
      const authorizationHeader = req.headers.authorization;

      if (!authorizationHeader) {
         console.error("‚ùå [Auth Middleware] Kh√¥ng c√≥ token trong header.");
         return res.status(403).json({ error: "Vui l√≤ng cung c·∫•p token!" });
      }

      const token = authorizationHeader.split(" ")[1];

      if (!token) {
         console.error("‚ùå [Auth Middleware] Token kh√¥ng h·ª£p l·ªá.");
         return res.status(403).json({ error: "Token kh√¥ng h·ª£p l·ªá!" });
      }

      try {
         const decodedToken = jwt.verify(token, ENV.JWT_SECRET);
         req.user = decodedToken;

         if (!req.user || !req.user.userId) {
            console.error("‚ùå [Auth Middleware] userId kh√¥ng h·ª£p l·ªá trong token:", req.user);
            return res.status(401).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
         }

         console.log(`‚úÖ [Auth Middleware] Token h·ª£p l·ªá! userId: ${req.user.userId}`);
         next();
      } catch (err) {
         console.error("üî• [Auth Middleware] L·ªói x√°c th·ª±c JWT:", err.message);
         return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
      }
   } catch (error) {
      console.error("üî• [Auth Middleware] L·ªói kh√¥ng x√°c ƒë·ªãnh:", error);
      return res.status(500).json({ error: "L·ªói x√°c th·ª±c! Vui l√≤ng th·ª≠ l·∫°i." });
   }
}
