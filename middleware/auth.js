import jwt from "jsonwebtoken";
import ENV from "../config/config.js";

/**
 * Middleware x√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng JWT.
 * Ki·ªÉm tra token h·ª£p l·ªá v√† g√°n th√¥ng tin ng∆∞·ªùi d√πng v√†o req.user.
 */
export default function Auth(req, res, next) {
   try {
      let token;

      // ∆Øu ti√™n l·∫•y token t·ª´ Cookie tr∆∞·ªõc
      if (req.cookies?.token) {
         token = req.cookies.token;
         // console.log("üîπ Token l·∫•y t·ª´ Cookies:", token);
      }
      // N·∫øu kh√¥ng c√≥ trong Cookies, th·ª≠ l·∫•y t·ª´ Header Authorization
      else if (req.headers.authorization?.startsWith("Bearer ")) {
         token = req.headers.authorization.split(" ")[1];
         // console.log("üîπ Token l·∫•y t·ª´ Authorization Header:", token);
      }

      if (!token) {
         console.error("‚ùå Kh√¥ng t√¨m th·∫•y token trong Cookie ho·∫∑c Authorization Header.");
         return res.status(403).json({ error: "Vui l√≤ng cung c·∫•p token!" });
      }

      // Gi·∫£i m√£ token v√† g√°n th√¥ng tin ng∆∞·ªùi d√πng v√†o req.user
      const decodedToken = jwt.verify(token, ENV.JWT_SECRET);
      console.log("‚úÖ Token decoded:", decodedToken);
      req.user = decodedToken;

      if (!req.user.userId) {
         console.error("‚ùå Token kh√¥ng ch·ª©a userId h·ª£p l·ªá:", req.user);
         return res.status(401).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
      }

      // N·∫øu t·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá, ti·∫øp t·ª•c ƒë·∫øn route ti·∫øp theo
      next();
   } catch (error) {
      handleTokenError(error, res);
   }
}

/**
 * H√†m x·ª≠ l√Ω l·ªói token m·ªôt c√°ch chi ti·∫øt.
 */
function handleTokenError(error, res) {
   if (error instanceof jwt.JsonWebTokenError) {
      console.error("‚ùå L·ªói x√°c th·ª±c: Token kh√¥ng h·ª£p l·ªá.", error.message);
      return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i." });
   } else if (error instanceof jwt.TokenExpiredError) {
      console.error("‚ùå L·ªói x√°c th·ª±c: Token ƒë√£ h·∫øt h·∫°n.", error.message);
      return res.status(401).json({ error: "Token ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i." });
   } else {
      console.error("‚ùå L·ªói x√°c th·ª±c kh√¥ng x√°c ƒë·ªãnh:", error.message);
      return res.status(500).json({ error: "L·ªói x√°c th·ª±c! Vui l√≤ng th·ª≠ l·∫°i sau." });
   }
}
